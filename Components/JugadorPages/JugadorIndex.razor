@page "/Jugador/index"
@using RegistroJugadores.Models
@using RegistroJugadores.Services
@using System.Linq
@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Consulta de jugadores</PageTitle>

<div class="container mt-4">
	<div class="card shadow-sm">
		<div class="card-header bg-white text-center">
			<h5 class="mb-0">Index de jugadores</h5>
		</div>
		<div class="card-body">
			<!-- Filtros -->
			<div class="row align-baseline-items-center mb-3">
				<div class="col-md-3">
					<label class="form-label fw-bold">Filtrar por:</label>
					<InputSelect class="form-select" @bind-Value="Filtro">
						<option value="JugadorId">JugadorID</option>
						<option value="Nombre">Nombre</option>
					</InputSelect>
				</div>

				<div class="col-md-5">
					<label class="form-label fw-bold">Búsqueda:</label>
					<div class="input-group">
						<input class="form-control" @bind="ValorFiltro" placeholder="Buscar..." />
						<button type="button" class="btn btn-primary" @onclick="Buscar">
							<i class="bi bi-search"></i> Buscar
						</button>
					</div>
				</div>

				<div class="col-md-4 text-end mt-4 mt-md-0">
					<a href="/JugadorCreate/Create" class="btn btn-success">
						<i class="bi bi-plus-circle me-1"></i> Nuevo jugador
					</a>
				</div>
			</div>
			<!-- Tabla de jugadores -->
			<table class="table table-bordered text-center align-middle" style="border-color: #dee2e6;">
				<thead class="table-light">
					<tr>
						<th>JugadorID</th>
						<th>Nombres</th>
						<th>Partidas</th>
						<th>Editar</th>
						<th>Eliminar</th>
					</tr>
				</thead>
				<tbody>
					@if (ListaJugadores.Count == 0)
					{
						<tr>
							<td colspan="5" class="text-muted">No se encontraron jugadores.</td>
						</tr>
					}
					else
					{
						@foreach (var jugador in ListaJugadores)
						{
							<tr>
								<td>@jugador.JugadorId</td>
								<td>@jugador.Nombre</td>
								<td>@jugador.Partidas.ToString("G")</td>
								<td>
									<a href="/JugadorEdit/Edit/@jugador.JugadorId" class="btn btn-outline-success btn-sm">
										<i class="bi bi-pencil"></i>
									</a>
								</td>
								<td>
									<button class="btn btn-outline-danger btn-sm" @onclick="() => PrepararEliminacion(jugador.JugadorId)">
										<i class="bi bi-trash"></i>
									</button>
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

@if (MostrarModalEliminar)
{
	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-primary text-white border-bottom-0">
				<h5 class="card-title mb-0">Eliminar Jugador</h5>
			</div>

			<div class="card-body text-danger py-3">
				<h6 class="card-title mb-0">¿Estás seguro de que deseas eliminar este jugador?</h6>
			</div>

			<div class="card shadow-sm mx-3 mb-3">
				<div class="card-header bg-light">
					<h5 class="card-title mb-0"><strong>Datos del jugador</strong></h5>
				</div>
				<div class="card-body">
					@if (JugadorAeliminar != null)
					{
						<p class="mb-2"><strong>JugadorID:</strong> @JugadorAeliminar?.JugadorId</p>
						<p class="mb-2"><strong>Nombres:</strong> @JugadorAeliminar?.Nombre</p>
						<p class="mb-2"><strong>Partidas:</strong> @JugadorAeliminar?.Partidas</p>
					}
				</div>
			</div>

			<div class="card-footer bg-white d-flex gap-2 p-3">
				<button type="button" class="btn btn-secondary" @onclick="() => MostrarModalEliminar = false">
					<i class="bi bi-arrow-left-circle me-1"></i> Volver
				</button>
				<button type="button" class="btn btn-outline-danger" @onclick="ConfirmarEliminacion">
					<i class="bi bi-trash me-1"></i> Eliminar
				</button>
			</div>
		</div>
	</div>

}

@code {
	public List<Jugadores> ListaJugadores { get; set; } = new();
	public string Filtro { get; set; } = "JugadorId";
	public string ValorFiltro { get; set; } = string.Empty;

	private bool MostrarModalEliminar { get; set; } = false;
	private int JugadorIdAeliminar { get; set; }
	private Jugadores? JugadorAeliminar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await CargarJugadores();
	}
	private async Task CargarJugadores()
	{
		var lista = await jugadoresService.Listar(j => true);

		if (!string.IsNullOrWhiteSpace(ValorFiltro))
		{
			if (Filtro == "JugadorId" && int.TryParse(ValorFiltro, out int Id))
			{
				lista = lista.Where(j => j.JugadorId == Id).ToList();
			}
			else if (Filtro == "Nombre")
			{
				lista = lista.Where(j => j.Nombre != null &&
					j.Nombre.Contains(ValorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
			}
		}
		ListaJugadores = lista;
	}
	private async Task Buscar()
	{
		await CargarJugadores();
	}

	private async Task Eliminar(int jugadorId)
	{
		if (await jugadoresService.Eliminar(jugadorId))
		{
			await CargarJugadores();
		}
	}
	private void PrepararEliminacion(int jugadorId)
	{
		JugadorIdAeliminar = jugadorId;
		JugadorAeliminar = ListaJugadores.FirstOrDefault(j => j.JugadorId == jugadorId);
		MostrarModalEliminar = true;
	}
	private async Task ConfirmarEliminacion()
	{
		if (await jugadoresService.Eliminar(JugadorIdAeliminar))
		{
			MostrarModalEliminar = false;
			await CargarJugadores();
		}
		
	}
}
