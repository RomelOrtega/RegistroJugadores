@page "/JugadorEdit/Edit/{JugadorId:int}"
@using RegistroJugadores.Models
@using RegistroJugadores.Services
@inject JugadoresService JugadoresService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Editar Jugador</PageTitle>

@if (Jugadores != null)
{
	<div class="container mt-4">
		<div class="card shadow-sm">
			<div class="card-header bd-white text-center">
				<h5 class="mb-0">Editar jugador</h5>
			</div>
			<div class="card-body">
				<EditForm Model="Jugadores" OnValidSubmit="GuardarCambios">
					<DataAnnotationsValidator />
					@if (!string.IsNullOrWhiteSpace(MensajeError))
					{
						<div class="alert alert-danger text-center">@MensajeError</div>
					}
					<div class="row">
						<div class="col-md-6 mb-3">
							<label for="nombre" class="form-label fw-bold">Nombre:</label>
							<InputText id="nombre" class="form-control" @bind-Value="Jugadores.Nombre" />
							<ValidationMessage For="() => Jugadores.Nombre" />
						</div>
						<div class="col-md-6 mb-3">
							<label for="Partidas" class="form-label fw-bold">Partidas:</label>
							<InputNumber id="Partidas" class="form-control" @bind-Value="Jugadores.Partidas" min="0" />
							<ValidationMessage For="() => Jugadores.Partidas" />
						</div>
					</div>
					<div class="d-flex justify-content-end gap-2 mt-3">
						<button type="submit" class="btn btn-primary">
							<i class="bi bi-save me-1"></i> Guardar Cambios
						</button>
						<a href="/Jugador/Index" class="btn btn-secondary">
							<i class="bi bi-arrow-left-circle me-1"></i> Cancelar
						</a>
						<button type="button" class="btn btn-danger" @onclick= "() => MostrarModalEliminar = true">
							<i class="bi bi-trash me-1"></i> Eliminar
						</button>
					</div>
				</EditForm>
			</div>
		</div>
	</div>
}
else
{
	<div class="text-center mt-5">
		<p class="lead text-muted">Cargando datos de los jugadores...</p>
	</div>
}

@if (MostrarModalEliminar)
{
		<div class= "card shadow-lg">
			<div class="modal-header text-center bg-primary text-white border-botton-0">
				<h5 class="card-title">Eliminar Jugador</h5>
					
			</div>

			<div class="card-header text-danger">
				<h6 class="card-title">¿Estás seguro de que deseas eliminar este jugador?</h6>
			</div>

		<div class="card-footer d-flex justiy-conent-between">
			<div class="btn-group" role="group" aria - label="Grupo de acciones">
			</div>

			<button type="button" class="btn btn-secondary" @onclick="() => MostrarModalEliminar = false"> 
				<i class="bi bi-arrow-left-circle me-1"></i> Volver 
				</button>
			<button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="ConfirmarEliminacion"> Eliminar </button>
		</div>
	</div>
}

@code{
	[Parameter]
	public int JugadorId { get; set; }
	public Jugadores? Jugadores { get; set; }
	private bool MostrarModalEliminar { get; set; } = false;
	private string MensajeError { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Jugadores = await JugadoresService.Buscar(JugadorId);
	}
	private async Task GuardarCambios()
	{
		if (Jugadores != null)
		{
			if (await JugadoresService.Existe(j =>
				j.Nombre.ToLower().Trim() == Jugadores.Nombre.ToLower().Trim() &&
				j.JugadorId != Jugadores.JugadorId))
			{
				MensajeError = "Ya existe un jugador con ese nombre.";
				return;
			}
			if (await JugadoresService.Guardar(Jugadores))
			{
				NavigationManager.NavigateTo("/Jugador/Index");
			}
		}
	}
	private async Task ConfirmarEliminacion()
	{
		if (Jugadores != null)
		{
			if (await JugadoresService.Eliminar(Jugadores.JugadorId))
			{
				MostrarModalEliminar = false;
				NavigationManager.NavigateTo("/Jugador/Index");
			}
		}
	}
}
